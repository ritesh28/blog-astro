---
import blueLogo from "@/images/logo_blue_small.png";
import whiteLogo from "@/images/logo_white_small.png";
import { Image } from "astro:assets";
import Github from "@/images/simple-icons/github.svg";
import Linkedin from "@/images/simple-icons/linkedin.svg";
import Portfolio from "@/images/simple-icons/maplibre.svg";
import Moon from "@/images/simple-icons/moon.svg";
import Sun from "@/images/simple-icons/sun.svg";
import { cn } from "@/utils/className";

const iconLinks = [
  {
    id: "github-link",
    IconSVG: Github,
    tooltip: "Github Code",
    url: import.meta.env.PUBLIC_GITHUB_CODE_LINK,
  },
  {
    id: "linkedin-link",
    IconSVG: Linkedin,
    tooltip: "Linkedin",
    url: import.meta.env.PUBLIC_LINKEDIN_LINK,
  },
  {
    id: "portfolio-link",
    IconSVG: Portfolio,
    tooltip: "Portfolio",
    url: import.meta.env.PUBLIC_PORTFOLIO_LINK,
  },
] as const;

const pageTabLinks = [
  { name: "All Blogs", slug: "blogs" },
  { name: "Tags", slug: "tags" },
  { name: "About", slug: "about" },
] as const;

function isCurrent(slug: string) {
  const currentPath = Astro.url.pathname;
  return currentPath.includes(slug);
}
---

<header>
  <nav class="bg-gray-100 border-gray-200 px-4 lg:px-6 py-2.5 dark:bg-gray-800">
    <div
      class="flex flex-wrap justify-between items-center mx-auto max-w-screen-xl"
    >
      <a href="/" class="flex items-center">
        <Image
          src={whiteLogo}
          class="mr-3 h-6 sm:h-9 w-auto hidden dark:block"
          alt="DevBlog Logo"
        />
        <Image
          src={blueLogo}
          class="mr-3 h-6 sm:h-9 w-auto block dark:hidden"
          alt="DevBlog Logo"
        />
        <span
          class="self-center text-xl font-semibold whitespace-nowrap dark:text-white"
          >DevBlog</span
        >
      </a>
      <div class="flex items-center lg:order-2">
        {
          iconLinks.map((iconLink) => (
            <a href={iconLink.url} target="_blank">
              <button
                id={iconLink.id}
                data-tooltip-target={`tooltip-${iconLink.id}`}
                type="button"
                class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5"
              >
                <iconLink.IconSVG class="w-5 h-5" fill="currentColor" />
              </button>
              <div
                id={`tooltip-${iconLink.id}`}
                role="tooltip"
                class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700"
              >
                {iconLink.tooltip}
                <div class="tooltip-arrow" data-popper-arrow />
              </div>
            </a>
          ))
        }
        <button
          id="theme-toggle"
          data-tooltip-target="tooltip-mode"
          type="button"
          class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5"
        >
          <Moon
            id="theme-toggle-dark-icon"
            class="hidden w-5 h-5"
            fill="currentColor"
          />
          <Sun
            id="theme-toggle-light-icon"
            class="hidden w-5 h-5"
            fill="currentColor"
          />
        </button>
        <div
          id="tooltip-mode"
          role="tooltip"
          class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-xs opacity-0 tooltip dark:bg-gray-700"
        >
          Toggle Mode
          <div class="tooltip-arrow" data-popper-arrow></div>
        </div>
        <button
          data-collapse-toggle="mobile-menu-2"
          type="button"
          class="inline-flex items-center p-2 ml-1 text-sm text-gray-500 rounded-lg lg:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
          aria-controls="mobile-menu-2"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <svg
            class="w-6 h-6"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              fill-rule="evenodd"
              d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
              clip-rule="evenodd"></path></svg
          >
          <svg
            class="hidden w-6 h-6"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              fill-rule="evenodd"
              d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
              clip-rule="evenodd"></path></svg
          >
        </button>
      </div>
      <div
        class="hidden justify-between items-center w-full lg:flex lg:w-auto lg:order-1"
        id="mobile-menu-2"
      >
        <ul
          class="flex flex-col mt-4 font-medium lg:flex-row lg:space-x-8 lg:mt-0"
        >
          {
            pageTabLinks.map((pageTabLink) => (
              <li>
                <a
                  href={`/${pageTabLink.slug}`}
                  class={cn(
                    "block py-2 pr-4 pl-3 border-b border-gray-100 hover:bg-gray-50 lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 lg:p-0 lg:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white lg:dark:hover:bg-transparent dark:border-gray-700",
                    isCurrent(pageTabLink.slug)
                      ? "text-primary-700 dark:text-white"
                      : "text-gray-700 dark:text-gray-400"
                  )}
                >
                  {pageTabLink.name}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
  </nav>
</header>

<script is:inline>
  var themeToggleDarkIcon = document.getElementById("theme-toggle-dark-icon");
  var themeToggleLightIcon = document.getElementById("theme-toggle-light-icon");

  // Change the icons inside the button based on previous settings
  if (
    localStorage.getItem("color-theme") === "dark" ||
    (!("color-theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    themeToggleLightIcon.classList.remove("hidden");
  } else {
    themeToggleDarkIcon.classList.remove("hidden");
  }

  var themeToggleBtn = document.getElementById("theme-toggle");

  themeToggleBtn.addEventListener("click", function () {
    // toggle icons inside button
    themeToggleDarkIcon.classList.toggle("hidden");
    themeToggleLightIcon.classList.toggle("hidden");

    // if set via local storage previously
    if (localStorage.getItem("color-theme")) {
      if (localStorage.getItem("color-theme") === "light") {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
      } else {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
      }

      // if NOT set via local storage previously
    } else {
      if (document.documentElement.classList.contains("dark")) {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
      } else {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
      }
    }
  });
</script>
